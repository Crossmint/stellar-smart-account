use soroban_sdk::{Bytes, BytesN, Env};

pub struct WebAuthnTestUtils;

impl WebAuthnTestUtils {
    pub fn new() -> Self {
        Self
    }

    pub fn get_test_secp256r1_public_key(&self) -> [u8; 65] {
        [
            0x04, 0x8d, 0x61, 0x7e, 0x65, 0xc9, 0x50, 0x8e, 0x64, 0xbc, 0xc5, 0x67, 0x3a, 0xc8,
            0x2a, 0x67, 0x99, 0xda, 0x3c, 0x14, 0x46, 0x68, 0x2c, 0x25, 0x8c, 0x46, 0x3f, 0xff,
            0xdf, 0x58, 0xdf, 0xd2, 0xfa, 0x3e, 0x6c, 0x37, 0x8b, 0x53, 0xd7, 0x95, 0xc4, 0xa4,
            0xdf, 0xfb, 0x41, 0x99, 0xed, 0xd7, 0x86, 0x2f, 0x23, 0xab, 0xaf, 0x02, 0x03, 0xb4,
            0xb8, 0x91, 0x1b, 0xa0, 0x56, 0x99, 0x94, 0xe1, 0x01,
        ]
    }

    pub fn get_test_credential_id(&self) -> [u8; 20] {
        [
            0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
            0x6c, 0x5f, 0x69, 0x64, 0x5f, 0x31,
        ]
    }

    pub fn generate_real_webauthn_signature(
        &self,
        _challenge: &[u8],
    ) -> (Bytes, Bytes, BytesN<64>) {
        let env = Env::default();

        let authenticator_data = [
            0x49, 0x96, 0x0d, 0xe5, 0x88, 0x0e, 0x8c, 0x68, 0x74, 0x34, 0x17, 0x0f, 0x64, 0x76,
            0x60, 0x5b, 0x8f, 0xe4, 0xae, 0xb9, 0xa2, 0x86, 0x32, 0xc7, 0x99, 0x5c, 0xf3, 0xba,
            0x83, 0x1d, 0x97, 0x63, 0x01, 0x00, 0x00, 0x00, 0x01,
        ];

        let client_data_json = b"{\"type\":\"webauthn.get\",\"challenge\":\"dGVzdF9jaGFsbGVuZ2U\",\"origin\":\"https://example.com\",\"crossOrigin\":false}";

        let signature_der = [
            0x30, 0x45, 0x02, 0x20, 0x18, 0x33, 0x4e, 0xc3, 0x9c, 0x3e, 0x4f, 0x8e, 0x65, 0x6b,
            0x8c, 0x0b, 0x17, 0x6d, 0x1b, 0x93, 0x9e, 0x5d, 0x2a, 0x11, 0xd3, 0x91, 0x4d, 0x6c,
            0x2e, 0x8b, 0x5e, 0x77, 0x29, 0x4c, 0x70, 0x4c, 0x02, 0x21, 0x00, 0xd4, 0x5d, 0xd2,
            0x2a, 0x67, 0x77, 0xd5, 0x6b, 0x86, 0x7e, 0x8b, 0x5e, 0x4d, 0x6a, 0x09, 0x84, 0x7a,
            0x69, 0xff, 0x13, 0x94, 0x42, 0x49, 0x98, 0x18, 0x2c, 0x2e, 0x78, 0x5a, 0x70, 0x73,
            0x2f,
        ];

        let authenticator_data_soroban = Bytes::from_slice(&env, &authenticator_data);
        let client_data_json_soroban = Bytes::from_slice(&env, client_data_json);

        let mut signature_array = [0u8; 64];
        signature_array[..signature_der.len().min(64)]
            .copy_from_slice(&signature_der[..signature_der.len().min(64)]);
        let signature_soroban = BytesN::from_array(&env, &signature_array);

        (
            authenticator_data_soroban,
            client_data_json_soroban,
            signature_soroban,
        )
    }

    pub fn generate_mock_webauthn_signature(
        &self,
        _challenge: &[u8],
    ) -> (Bytes, Bytes, BytesN<64>) {
        let env = Env::default();

        let authenticator_data = Bytes::from_array(&env, b"mock_authenticator_data_for_testing");

        let client_data_json_str = b"{\"type\":\"webauthn.get\",\"challenge\":\"dGVzdF9jaGFsbGVuZ2U\",\"origin\":\"https://test.example.com\"}";
        let client_data_json = Bytes::from_slice(&env, client_data_json_str);

        let signature = BytesN::from_array(&env, &[1u8; 64]);

        (authenticator_data, client_data_json, signature)
    }
}
